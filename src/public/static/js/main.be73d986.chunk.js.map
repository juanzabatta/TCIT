{"version":3,"sources":["redux/postDucks.js","components/SearchPost.jsx","components/ListPost.jsx","components/FormPost.jsx","redux/store.js","App.jsx","index.js"],"names":["urlAxios","dataInitial","array","filter","SearchPost","dispatch","useDispatch","useState","name","datos","setDatos","className","id","onSubmit","event","preventDefault","getState","a","type","payload","error","console","log","onChange","target","value","placeholder","unique","ListPost","axios","get","res","data","posts","useSelector","store","postsWithoutFilter","length","forEach","post","toLowerCase","push","colSpan","map","key","description","onClick","delete","FormPost","handleInputChange","document","getElementById","reset","alert","rootReducer","combineReducers","state","action","concat","newStateDelete","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","App","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.be73d986.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst urlAxios = 'http://localhost:3000/api/post/';\r\n\r\n// constantes\r\nconst dataInitial = {\r\n  array: [],\r\n  filter:\"\"\r\n};\r\n\r\n// types\r\nconst GET_POST_SUCCESS = 'GET_POST_SUCCESS';\r\nconst SET_POST_SUCCESS = 'SET_POST_SUCCESS';\r\nconst DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS';\r\nconst SET_FILTER_SUCCESS = 'SET_FILTER_SUCCESS';\r\n\r\n// reducer\r\nexport default function postReducer( state = dataInitial, action ){\r\n  switch ( action.type ) {\r\n    case GET_POST_SUCCESS:\r\n      return { ...state, array: action.payload };\r\n\r\n    case SET_POST_SUCCESS:\r\n      return { ...state, array: state.array.concat( action.payload ) };\r\n\r\n    case DELETE_POST_SUCCESS:\r\n      const newStateDelete = state.array.filter( post => post.id !== action.payload.id);\r\n      return { ...state, array: newStateDelete };\r\n\r\n    case SET_FILTER_SUCCESS:\r\n      return { ...state, filter: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// actions\r\n// Obtener los Post\r\nexport const getPostAction = () => async ( dispatch, getState ) => {\r\n  try {\r\n    const res = await axios.get( urlAxios );\r\n\r\n    dispatch({\r\n      type: GET_POST_SUCCESS,\r\n      payload: res.data.posts\r\n    });\r\n    \r\n  } catch ( error ) {\r\n    console.log( error );\r\n  }\r\n};\r\n\r\n// Agregar un Post\r\nexport const addPostAction = (post) => async ( dispatch, getState ) => {\r\n  try {\r\n    const res = await axios.post( urlAxios, post );\r\nconsole.log(res.data.post);\r\n    dispatch({\r\n      type: SET_POST_SUCCESS,\r\n      payload: res.data.post\r\n    });\r\n    \r\n  } catch ( error ) {\r\n    console.log( error );\r\n  }\r\n};\r\n\r\n// Borrar un Post\r\nexport const deletePostAction = (id) => async ( dispatch, getState ) => {  \r\n  try {\r\n    const res = await axios.delete( urlAxios + 'delete/'+ id );\r\n    dispatch({\r\n      type: DELETE_POST_SUCCESS,\r\n      payload: res.data.post\r\n    });\r\n  } catch ( error ) {\r\n    console.log( error );\r\n  }\r\n};\r\n\r\n// Agregar filtro\r\nexport const setFilterPostAction = (filter) => async ( dispatch, getState ) => {\r\n  try {\r\n\r\n    dispatch({\r\n      type: SET_FILTER_SUCCESS,\r\n      payload: filter\r\n    });\r\n    \r\n  } catch ( error ) {\r\n    console.log( error );\r\n  }\r\n};","import React, { Fragment, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setFilterPostAction } from '../redux/postDucks'\r\nimport './SearchPost.css';\r\n\r\nconst SearchPost =()=>{\r\n  const dispatch = useDispatch();\r\n  const [datos, setDatos] = useState({\r\n    name:''\r\n  });\r\n\r\n  const handleInputChange =(event)=>{\r\n    setDatos({\r\n      ...datos,\r\n      [event.target.name]:event.target.value\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    dispatch( setFilterPostAction(datos.name) );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <section className=\"searchPost\">\r\n        <form id=\"formSearchPost\" onSubmit={handleSubmit} >\r\n          <input \r\n            type=\"search\" \r\n            name=\"name\"\r\n            onChange={handleInputChange} \r\n            placeholder=\"Filtro de nombre\" \r\n            />\r\n\r\n          <input type=\"submit\" value=\"Buscar\"/>\r\n        </form>                   \r\n      </section>\r\n    </Fragment>\r\n    \r\n  );\r\n};\r\n\r\nexport default SearchPost;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getPostAction, deletePostAction } from '../redux/postDucks'\r\nimport './ListPost.css';\r\n\r\nlet unique = true;\r\n\r\nconst ListPost =()=>{\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  if (unique ) {\r\n    dispatch( getPostAction() );\r\n    unique = false;\r\n  };\r\n\r\n  let filter = useSelector( store => store.posts.filter );\r\n  let posts=[];\r\n  const postsWithoutFilter = useSelector( store => store.posts.array );\r\n\r\n  if ( filter !== \"\" && postsWithoutFilter.length > 0) {\r\n    postsWithoutFilter.forEach(post => {\r\n      if (post.name.toLowerCase() === filter.toLowerCase()) {\r\n          posts.push(post);\r\n      };\r\n    });\r\n\r\n  } else{\r\n      posts = postsWithoutFilter; \r\n  };\r\n  \r\n  return (\r\n    <section className=\"listPost\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Nombre</th>\r\n                <th>Descripción</th>\r\n                <th>Acción</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>               \r\n                  {\r\n                    posts.length === 0 ? \r\n                    <tr><td colSpan=\"3\" className=\"notResults\">Not Results.</td></tr>:\r\n\r\n                        posts.map((post) =>(\r\n                          <tr key={post.id}>\r\n                            <td>{ post.name }</td>\r\n                            <td>{ post.description }</td>\r\n                            <td><button onClick={ () => dispatch( deletePostAction(post.id) ) }>Eliminar</button></td>\r\n                          </tr>\r\n                        ))\r\n                   \r\n                  }\r\n            </tbody>\r\n                         \r\n          </table>\r\n                   \r\n        </section>\r\n  );\r\n};\r\n\r\nexport default ListPost;","import React, { Fragment, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPostAction } from '../redux/postDucks'\r\nimport './FormPost.css';\r\n\r\nconst FormPost =()=>{\r\n  const dispatch = useDispatch();\r\n  const [datos, setDatos] = useState({\r\n    name:'',\r\n    description:''\r\n  });\r\n\r\n  const handleInputChange =(event)=>{\r\n    setDatos({\r\n      ...datos,\r\n      [event.target.name]:event.target.value\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (datos.name.length > 0 && datos.description.length > 0) {\r\n      dispatch( addPostAction(datos) );\r\n        document.getElementById(\"fromAddPost\").reset();\r\n    }else{\r\n      alert('Por favor completa los campos.')\r\n    };\r\n \r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <section className=\"FormPost\">\r\n        <form id=\"fromAddPost\" onSubmit={handleSubmit} >\r\n          <input \r\n            type=\"text\" \r\n            name=\"name\"\r\n            onChange={handleInputChange} \r\n            placeholder=\"Nombre\" \r\n            />\r\n\r\n          <input \r\n            type=\"text\" \r\n            name=\"description\"\r\n            onChange={handleInputChange}  \r\n            placeholder=\"Descripción\" \r\n            />\r\n\r\n          <input type=\"submit\" value=\"Agregar\"/>\r\n        </form>                   \r\n      </section>\r\n    </Fragment>\r\n    \r\n  );\r\n};\r\n\r\nexport default FormPost;","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport postReducer from './postDucks';\r\n\r\nconst rootReducer = combineReducers({\r\n    posts: postReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore() {\r\n    const store = createStore( rootReducer, composeEnhancers( applyMiddleware(thunk) ));\r\n    return store;\r\n};","import React from 'react';\nimport SearchPost from './components/SearchPost.jsx';\nimport ListPost from './components/ListPost.jsx';\nimport FormPost from './components/FormPost.jsx';\nimport { Provider } from 'react-redux';\nimport generateStore from './redux/store';\n\nfunction App(){\n  const store = generateStore();\n\n    return (\n      <Provider store ={ store }>\n        <SearchPost />\n        <ListPost /> \n        <FormPost />       \n      </Provider>\n    );\n};\n\nexport default App;\n      ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n     <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}